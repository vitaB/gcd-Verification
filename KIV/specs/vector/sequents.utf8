
;; variables m : nat;

lemmas

;; <name> : <sequent> ;
;; used for : <some_flags> ; comment : <some_comment> ;
assoziativ-addition : # v0 = # v1 ∧ # v0 = # v2 ⊦ v0 + (v1 + v2) = (v0 + v1) + v2;
kommutativ-addition : # v0 = # v1 ⊦ v0 + v1 = v1 + v0;
abs-Subtraktion-1: # v = # (v - v);
shift-add : # v0 = # v1 ∧ # v0 = # v2 ⊦ v0 - (v1 + v2) = v0 - v1 - v2;
shift-sub : # v0 = # v1 ∧ # v0 = # v2 ⊦ v0 - (v1 - v2) = v0 - v1 + v2;
eq : # v0 = # v1 ⊦  v0 + v1 - v0 = v1;
eq-1 : # v0 = # v1 ∧ # v0 = # v2 ⊦ v0 + v1 - v2 = v0 + (v1 - v2);
size-1 : # v0 = # v1 ⊦ # (v0 + v1) = # (v1 + v0);
size-2 : # v0 = # v1 ⊦ # (v0 - v1) = # (v1 - v0);
size-3 : # v1 = # v2 ⊦( m = # (v1 + v2)) ↔ (m - # v2 = # v1 - # v2);
add : # v0 = # v1 ∧ # v0 = # v2 ⊦ v2 = v0 + v1 ↔ ∀ n. n < # v0 → v2[n] = v0[n] + v1[n];
sub : # v0 = # v1 ∧ # v0 = # v2 ⊦ v2 = v0 - v1 ↔ ∀ n. n < # v0 → v2[n] = v0[n] - v1[n];
Null-Vector-addition : # v = # O ⊦ v = v + O;
Null-Vector-subtraktion : # v = # O ⊦ v = v - O;
Null-Vector-1 : # v = # O ⊦ O = v - v;
Null-Vector-2 : # O > 0 ⊦ O[n] = 0;
Null-Vector-3 : ∀ v. O = v - v;
;;; END

;;;****************************************************************************************
;;; This file is used to add additional theorems.
;;; 1. Two semicolons start a line comment
;;; 2. (: ... :) delimit a comment. They can be nested!
;;; 3. Reading stops after ;;; END
;;; 4. Theorems have the form

<name> : <sequent> ; used for : <some_flags> ; comment : <some_comment> ;

     'used for' and 'comment' are optional.
     <some_comment> may be any text not containing a ;
     <some_flags> is a comma separated list with information that the lemma should
     be used as a simplifier rule or something like that. Since you can add or delete
     simplifier rules etc. by menu commands, you can always omit 'used for' if you want.
     Note: changing the flags or the comment only works if the sequent is also changed!!!
     possible flags are:

     s (simplifier rule), ls (local simplifier rule), f (forward), lf (local forward),
     e (elimination), c (cut), lc (local cut)

